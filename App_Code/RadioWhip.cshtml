@using System.Collections.Concurrent
@using System.IO.Compression
@using System.Security.Cryptography
@using System.ServiceModel.Syndication
@using System.Text
@using System.Text.RegularExpressions
@using System.Threading
@using System.Xml
@using CsQuery

@functions
{

    public class Entry
    {
        public String Title { get; set; }
        public String Url { get; set; }
        public String Content { get; set; }
        public String ContentType { get; set; }
        public DateTime Updated { get; set; }

        public Entry()
        {
            ContentType = "text/html";
        }
        
        public Entry(String title, String url, String content, DateTime updated)
        {
            Title = title;
            Url = url;
            Content = content;
            ContentType = "text/html";

            Updated = updated;
        }
    }

    /// <summary>
    /// 文字列からSHA256ハッシュを生成します。
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static String GenerateHash(String value)
    {
        var sha256 = SHA256.Create();
        return String.Concat(sha256.ComputeHash(Encoding.UTF8.GetBytes(value)).Select(x => x.ToString("x2")));
    }

    /// <summary>
    /// ページの全文を取得します。
    /// </summary>
    /// <param name="url"></param>
    /// <param name="selector"></param>
    /// <param name="encoding"></param>
    /// <returns></returns>
    public static String FetchFullArticle(String url, String selector, Encoding encoding = null)
    {
        return FetchFullArticle(url, (contents, cq) => cq[selector].Html(), encoding);
    }

    /// <summary>
    /// ページの全文を取得します。
    /// </summary>
    /// <param name="url"></param>
    /// <param name="scraper"></param>
    /// <param name="encoding"></param>
    /// <returns></returns>
    public static String FetchFullArticle(String url, Func<String, CsQuery.CQ, String> scraper, Encoding encoding = null)
    {
        var uri = new Uri(url);
        var cacheDir = Path.Combine(Server.MapPath("~/App_Data/RadioWhip/Cache"), uri.Host);
        var cachePath = Path.Combine(cacheDir, GenerateHash(url));

        if (!Directory.Exists(cacheDir))
        {
            Directory.CreateDirectory(cacheDir);
        }
        
        var contents = "";

        if (File.Exists(cachePath) && File.GetLastWriteTimeUtc(cachePath).AddDays(1) > DateTime.Today.ToUniversalTime())
        {
            using (var stream = File.OpenRead(cachePath))
            using (var gzipStream = new GZipStream(stream, CompressionMode.Decompress))
            using (var memoryStream = new MemoryStream())
            {
                gzipStream.CopyTo(memoryStream);
                contents = Encoding.UTF8.GetString(memoryStream.ToArray());
            }
        }
        else
        {
            var webClient = new WebClient();
            webClient.Headers["User-Agent"] = "Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko";
            webClient.Headers["Accept"] = "*/*";
            var data = webClient.DownloadData(url);
            if (encoding == null)
            {
                encoding = Encoding.GetEncoding(SimpleHelpers.FileEncoding.DetectFileEncoding(data, 0, data.Length), new EncoderReplacementFallback("?"), new DecoderReplacementFallback("?"));
            }

            contents = encoding.GetString(data);
            
            using (var stream = File.Create(cachePath))
            using (var gzipStream = new GZipStream(stream, CompressionMode.Compress))
            {
                var tmp = encoding.GetBytes(contents);
                gzipStream.Write(tmp, 0, tmp.Length);
            }
            
            Thread.Sleep(1000); // 連続アクセスはあぶない
        }

        return FixInPageUrls(scraper(contents, CQ.CreateDocument(contents)), url);
    }
    
    
    /// <summary>
    /// ページ内のa要素やimg要素のURLを修正します。
    /// </summary>
    /// <param name="cq"></param>
    /// <param name="baseUrl"></param>
    public static CQ FixInPageUrls(CQ cq, String baseUrl)
    {
        baseUrl = Regex.Replace(baseUrl, "^(https?://[^/]+)(.*)/.*", "$1$2/");
        
        cq["img[src]"].Where(x => !x["src"].StartsWith("http")).Select(x => x["src"] = FixUrl(baseUrl, x["src"])).ToArray(); // ForEachガワリヨクナイネ
        cq["a[href]"].Where(x => !x["href"].StartsWith("http")).Select(x => x["href"] = FixUrl(baseUrl, x["href"])).ToArray();

        return cq;
    }
    /// <summary>
    /// ページ内のa要素やimg要素のURLを修正します。
    /// </summary>
    /// <param name="cq"></param>
    /// <param name="baseUrl"></param>
    public static String FixInPageUrls(String content, String baseUrl)
    {
        var cq = CQ.CreateFragment(content);
        FixInPageUrls(cq, baseUrl);

        return String.Concat(cq.Selection.Select(x => x.NodeType == NodeType.ELEMENT_NODE ? x.OuterHTML : x.ToString()));
    }
    /// <summary>
    /// ページ内のa要素やimg要素のURLを修正します。
    /// </summary>
    /// <param name="cq"></param>
    /// <param name="baseUrl"></param>
    public static Entry FixInPageUrls(Entry entry, String baseUrl)
    {
        entry.Content = FixInPageUrls(entry.Content, baseUrl);
        return entry;
    }

    private static String FixUrl(String baseUrl, String path)
    {
        return (path.StartsWith("/") ? new Uri(baseUrl).GetLeftPart(UriPartial.Authority) : baseUrl) + path;
    }
}

@functions
{
    /// <summary>
    /// フィルターを登録します
    /// </summary>
    /// <param name="filter">フィルターの処理。nullを返すとそのエントリーは削除されます。第一引数はエントリーのアイテム、第二引数はエントリーページのURL、第三引数はフィードのURL。</param>
    /// <returns></returns>
}
@helper RegisterFilter(Func<SyndicationItem, String, String, SyndicationItem> filter)
{
    var model = Model as List<Func<SyndicationItem, String, String, SyndicationItem>>;
    model.Add(filter);
}

@functions
{
    /// <summary>
    /// FullFeedのハンドラを登録します
    /// </summary>
    /// <param name="matcher">FullFeedの処理対象かどうかをマッチテストする処理。trueを返した場合にhandlerが呼び出されます。</param>
    /// <param name="handler">フィードの本文を返す処理。第一引数はエントリーのアイテム、第二引数はエントリーページのHTML、第三引数はCsQueryのインスタンス。</param>
    /// <returns></returns>
}
@helper RegisterHandler(Func<String, String, Boolean> matcher, Func<SyndicationItem, String, CsQuery.CQ, String> handler)
{
    var model = Model as Dictionary<Func<String, String, Boolean>, Func<SyndicationItem, String, CsQuery.CQ, String>>;
    model[matcher] = handler;
}

@functions
{
    /// <summary>
    /// 指定したURLのフィードにフィルタを適用して出力します
    /// </summary>
    /// <param name="url"></param>
    /// <returns></returns>
}
@helper ApplyFeedFilter(String url)
{
    var filterTemplateDir = Server.MapPath("~/App_Data/RadioWhip/Filter/");
    var filters = new List<Func<SyndicationItem, String, String, SyndicationItem>>();
    Directory.EnumerateFiles(filterTemplateDir, "*.cshtml", SearchOption.AllDirectories).Select(x => RadioWhip.CurrentPage.RenderPage(x.Replace(filterTemplateDir, "~/App_Data/RadioWhip/Filter/"), filters).ToHtmlString()).ToArray();

    SyndicationFeed feed = null;
    try
    {
        feed = SyndicationFeed.Load(XmlReader.Create(url));
    }
    catch (WebException webE)
    {
        var webResponse = webE.Response as HttpWebResponse;
        if (webResponse == null)
        {
            throw;
        }

        var statusCode = (Int32) webResponse.StatusCode;
        if (statusCode >= 400 && statusCode <= 599)
        {
            Response.ClearHeaders();
            Response.ClearContent();
            Response.StatusCode = statusCode;
            Response.StatusDescription = webResponse.StatusDescription;

            Response.ContentType = "text/plain";
            Response.Write(String.Format("{0}: {1}", statusCode, webResponse.StatusDescription));
            return;
        }

        // TODO: WebClientだとたぶんここには来ないのであとで直す
        if (statusCode >= 300 && statusCode <= 399)
        {
            Response.Redirect(webResponse.ResponseUri.ToString());
            return;
        }
        throw;
    }

    if (feed.Id == null)
    {
        feed.Id = url;
    }
    
    feed.Items = feed.Items.Select(item =>
                                   {
                                       // LastUpdatedTimeが0001-01-01だと現在の時刻で吐き出されてしまう
                                       if (item.LastUpdatedTime == DateTimeOffset.MinValue)
                                       {
                                           item.LastUpdatedTime = item.PublishDate;
                                       }

                                       // URLをとってきて
                                       var entryUri = item.Links.Where(x => x.RelationshipType == "alternate").Select(x => x.Uri.ToString()).FirstOrDefault();
                                       if (entryUri == null)
                                       {
                                           return item;
                                       }

                                       // idがnullだと謎のIDが吐かれてしまう
                                       if (item.Id == null)
                                       {
                                           item.Id = entryUri;
                                       }

                                       // 処理する
                                       foreach (var filter in filters)
                                       {
                                           try
                                           {
                                               // フィルターが null を返えすとフィルターになる
                                               item = filter(item, entryUri, url);
                                           }
                                           catch
                                           {
                                           }
                                       }

                                       return item;
                                   })
                                   .Where(x => x != null)
                                   .ToArray();
    var sbFeed = new StringBuilder();
    var xmlWriter = XmlWriter.Create(sbFeed, new XmlWriterSettings() { OmitXmlDeclaration = true });
    feed.SaveAsAtom10(xmlWriter);
    xmlWriter.Flush();

    Response.ClearContent();
    Response.ContentType = "application/atom+xml";
    if (!Request.IsLocal)
    {
        Response.OutputCache(60 * 5); // 5分
    }

    @Html.Raw(sbFeed.ToString())
}

@functions
{
    /// <summary>
    /// 指定したURLから内容を取り出してフィードを生成します。
    /// </summary>
    /// <param name="url">取得対象のURL</param>
    /// <param name="title">フィードのタイトル</param>
    /// <param name="scrapar">内容を取り出すための処理</param>
    /// <param name="encoding">取得したデータのエンコーディング(未指定時は自動判別)</param>
    /// <param name="description">フィードのdescription</param>
    /// <returns></returns>
}
@helper Feedify(String url, String title, Func<String, CsQuery.CQ, IEnumerable<Entry>> scrapar, Encoding encoding = null, String description = null)
{
    var webClient = new WebClient();
    webClient.Headers["User-Agent"] = "Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko";
    webClient.Headers["Accept"] = "*/*";
    var data = webClient.DownloadData(url);

    if (encoding == null)
    {
        encoding = Encoding.GetEncoding(SimpleHelpers.FileEncoding.DetectFileEncoding(data, 0, data.Length), new EncoderReplacementFallback("?"), new DecoderReplacementFallback("?"));
    }

    var content = encoding.GetString(data);
    var entries = scrapar(content, FixInPageUrls(CQ.CreateDocument(content), url)).ToArray();
    
    @OutputFeed(url, title, description, entries)
}

@helper OutputFeed(String url, String title, String description, Entry[] entries)
{
    Response.ClearContent();
    Response.ContentType = "application/rss+xml";
    if (!Request.IsLocal)
    {
        Response.OutputCache(60 * 5); // 5分
    }

    <rss version="2.0">
        <channel>
            <title>@title</title>
            @Html.Raw("<link>")@url@Html.Raw("</link>")
            <description>@description</description>

            @foreach (var entry in entries)
            {
                <item>
                    <title>@entry.Title</title>
                    <pubDate>@entry.Updated.ToUniversalTime().ToString("s")</pubDate>
                    @Html.Raw("<link>")@entry.Url@Html.Raw("</link>")
                    <description>
                        <![CDATA[
                        @Html.Raw(entry.Content)
                        ]]>
                    </description>
                </item>
            }

        </channel>
    </rss>
}